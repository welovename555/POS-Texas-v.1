import { userStore } from '../state/userStore.js';
import { productStore } from '../state/productStore.js';
import { cartStore } from '../state/cartStore.js';
import { getProductsWithStock } from '../api/productApi.js';
import { router, navigate } from '../router/index.js'; // import navigate ‡πÄ‡∏û‡∏¥‡πà‡∏°

// --- Helper Functions for Rendering ---

function renderProductCard(product) { /* ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà 67 ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ... */ }

function renderProductGrid() { /* ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà 67 ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ... */ }

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
function renderCart() {
  const cartItemsElement = document.getElementById('cart-items');
  const cartSummaryElement = document.getElementById('cart-summary');
  if (!cartItemsElement || !cartSummaryElement) return;

  const cart = cartStore.getCart();
  const total = cartStore.getCartTotal();
  const itemCount = cartStore.getCartItemCount();

  if (itemCount === 0) {
    cartItemsElement.innerHTML = '<p class="cart-empty-message">‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á</p>';
    cartSummaryElement.innerHTML = '';
    return;
  }

  cartItemsElement.innerHTML = cart.map(item => `
    <div class="cart-item" data-cart-item-id="${item.id}">
      <div class="cart-item__info">
        <span class="cart-item__name">${item.name}</span>
        <span class="cart-item__price">${item.price} ‡∏ö‡∏≤‡∏ó</span>
      </div>
      <div class="cart-item__controls">
        <button class="quantity-btn" data-action="decrease">-</button>
        <span class="cart-item__quantity">${item.quantity}</span>
        <button class="quantity-btn" data-action="increase">+</button>
        <button class="remove-btn" data-action="remove">üóëÔ∏è</button>
      </div>
    </div>
  `).join('');

  cartSummaryElement.innerHTML = `
    <div class="cart-summary">
      <div class="summary-line">
        <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
        <span>${itemCount} ‡∏ä‡∏¥‡πâ‡∏ô</span>
      </div>
      <div class="summary-line summary-line--total">
        <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</span>
        <span>${total.toFixed(2)} ‡∏ö‡∏≤‡∏ó</span>
      </div>
      <button class="checkout-button" id="checkout-btn">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</button>
    </div>
  `;
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ ---
function handleProductClick(event) {
  const productCard = event.target.closest('.product-card');
  if (!productCard || productCard.disabled) return;

  const productId = productCard.dataset.productId;
  const product = productStore.getProductById(productId);

  if (product) {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    if (product.price) {
      cartStore.addItem(product, product.price);
    } else {
      // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤
      console.log('Multi-price product clicked. Modal needed.');
    }
  }
}

function handleCartClick(event) {
  const actionButton = event.target.closest('[data-action]');
  if (!actionButton) return;

  const cartItemElement = event.target.closest('.cart-item');
  const cartItemId = cartItemElement.dataset.cartItemId;
  const action = actionButton.dataset.action;

  const item = cartStore.getCart().find(i => i.id === cartItemId);
  if (!item) return;

  if (action === 'increase') {
    cartStore.updateItemQuantity(cartItemId, item.quantity + 1);
  } else if (action === 'decrease') {
    cartStore.updateItemQuantity(cartItemId, item.quantity - 1);
  } else if (action === 'remove') {
    cartStore.removeItem(cartItemId);
  }
}


// --- Main Page Component (‡∏â‡∏ö‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï) ---
export function PosPage() {
  const currentUser = userStore.getCurrentUser();
  if (!currentUser) { /* ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ... */ }

  const view = `...`; // <-- view HTML ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà 59 ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  
  const postRender = async () => {
    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---

    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    const shopId = currentUser.shop_id;
    const products = await getProductsWithStock(shopId);
    productStore.setProducts(products);

    // 2. Render ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    renderProductGrid();
    renderCart(); // Render ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    
    // 3. "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°" ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á State
    const unsubscribeCart = cartStore.subscribe(renderCart); // ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà cartStore ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÉ‡∏´‡πâ renderCart ‡πÉ‡∏´‡∏°‡πà
    // const unsubscribeProducts = productStore.subscribe(renderProductGrid); // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ real-time

    // 4. "‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á" ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    document.getElementById('product-grid')?.addEventListener('click', handleProductClick);
    document.getElementById('cart-items')?.addEventListener('click', handleCartClick);
    document.getElementById('logout-button')?.addEventListener('click', () => {
      userStore.signOut();
      router.init();
      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leak ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
      unsubscribeCart();
      // unsubscribeProducts();
    });
  };

  return { view, postRender };
}
